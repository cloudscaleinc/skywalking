# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: E2E deployment using CI/CD for SkyWalking

on:
  push:
    branches:
      - Keshav-poc

jobs:
  build-and-push:
    if: github.repository == 'cloudscaleinc/skywalking'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    timeout-minutes: 90
    env:
      TAG: ${{ github.sha }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Determine Docker Image Version
      id: determine-version
      run: |
        if [ -f version.txt ]; then
          VERSION=$(cat version.txt)
        else
          VERSION=$(date +"%Y.%m.%d.%H%M%S")  # Generate version based on timestamp
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
      shell: bash

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Cache `make docker` output
      uses: actions/cache@v3
      with:
        path: ./dist
        key: ${{ runner.os }}-make-docker-${{ hashFiles('**/*') }}
        restore-keys: |
          ${{ runner.os }}-make-docker-
          
    - name: Run `make docker` to generate distribution tarball
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: |
        git submodule init
        git submodule update
        make docker SKIP_TEST=true


    - name: Ensure the tarball exists before building
      run: ls -l dist/apache-skywalking-apm-bin.tar.gz
    
    - name: Copy tarball to the Docker build context
      run: cp dist/apache-skywalking-apm-bin.tar.gz docker/oap/
    
    - name: Build and Push OAP Docker Image
      run: |
        cd docker/oap
        docker buildx build \
          --file ./Dockerfile \
          --tag ghcr.io/cloudscaleinc/skywalking/oap:${{ env.VERSION }} \
          --tag ghcr.io/cloudscaleinc/skywalking/oap:latest \
          --push .

    - name: Build and Push UI Docker Image
      run: |
        cd docker/ui
        docker buildx build \
          --file ./Dockerfile \
          --tag ghcr.io/cloudscaleinc/skywalking/ui:${{ env.VERSION }} \
          --tag ghcr.io/cloudscaleinc/skywalking/ui:latest \
          --push .

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: SSH into Azure VM and Deploy
        env:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY_BASE64 }}
        run: |
          eval $(ssh-agent -s)
          echo "$key" | base64 --decode | ssh-add -
        
          ssh -vvv -o StrictHostKeyChecking=no -t $username@$host << 'EOF'
            # Pull the latest code
            cd ~/skywalking
            git pull origin Keshav-poc
            git submodule update --init --recursive

            cd ~/skywalking/docker
            docker-compose --profile elasticsearch down
            
            export OAP_IMAGE=ghcr.io/cloudscaleinc/skywalking/oap:${{ env.VERSION }}
            export UI_IMAGE=ghcr.io/cloudscaleinc/skywalking/ui:${{ env.VERSION }}
      
            docker pull $OAP_IMAGE || docker pull ghcr.io/cloudscaleinc/skywalking/oap:latest
            docker pull $UI_IMAGE || docker pull ghcr.io/cloudscaleinc/skywalking/ui:latest
      
            docker-compose --profile elasticsearch up -d
            
          EOF
